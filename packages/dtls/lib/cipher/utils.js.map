{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/cipher/utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AAEjC;;;;;;GAMG;AACH,SAAS,IAAI,CAAC,SAAiB,EAAE,MAAc,EAAE,IAAY;IAC3D,MAAM,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAClD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAClB,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;AACvB,CAAC;AA0BQ,oBAAI;AAxBb;;;;;;;GAOG;AACH,SAAS,KAAK,CAAC,KAAa,EAAE,SAAiB,EAAE,MAAc,EAAE,IAAY;IAC3E,MAAM,WAAW,GAAG,KAAK,CAAC;IAC1B,MAAM,IAAI,GAAa,EAAE,CAAC;IAC1B,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC,KAAK;IAEpB,GAAG;QACD,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,8BAA8B;QAChE,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QAElE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAClB,KAAK,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,wCAAwC;KACjE,QAAQ,KAAK,GAAG,CAAC,EAAE;IAEpB,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;AAC1C,CAAC;AAEc,sBAAK","sourcesContent":["import * as crypto from \"crypto\";\n\n/**\n * Culculates HMAC using provided hash.\n * @param {string} algorithm - Hash algorithm.\n * @param {Buffer} secret - Hmac seed.\n * @param {Buffer} data - Input data.\n * @returns {Buffer}\n */\nfunction hmac(algorithm: string, secret: Buffer, data: Buffer) {\n  const hash = crypto.createHmac(algorithm, secret);\n  hash.update(data);\n  return hash.digest();\n}\n\n/**\n * A data expansion function for PRF.\n * @param {number} bytes - The number of bytes required by PRF.\n * @param {string} algorithm - Hmac hash algorithm.\n * @param {Buffer} secret - Hmac secret.\n * @param {Buffer} seed - Input data.\n * @returns {Buffer}\n */\nfunction pHash(bytes: number, algorithm: string, secret: Buffer, seed: Buffer) {\n  const totalLength = bytes;\n  const bufs: Buffer[] = [];\n  let Ai = seed; // A0\n\n  do {\n    Ai = hmac(algorithm, secret, Ai); // A(i) = HMAC(secret, A(i-1))\n    const output = hmac(algorithm, secret, Buffer.concat([Ai, seed]));\n\n    bufs.push(output);\n    bytes -= output.length; // eslint-disable-line no-param-reassign\n  } while (bytes > 0);\n\n  return Buffer.concat(bufs, totalLength);\n}\n\nexport { hmac, pHash };\n"]}