{"version":3,"file":"antiReplayWindow.js","sourceRoot":"","sources":["../../src/record/antiReplayWindow.ts"],"names":[],"mappings":"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","sourcesContent":["const width = 64; // bits / entries, must be multiple of INT_SIZE\nconst INT_SIZE = 32; // in JS, bitwise operators use 32bit ints\n\n/**\n * Provides protection against replay attacks by remembering received packets in a sliding window\n */\nexport class AntiReplayWindow {\n  // window bitmap looks as follows:\n  //  v- upper end                    lower end --v\n  // [111011 ... window_n]...[11111101 ... window_0]\n  private window: number[] = [];\n  private ceiling: number = 0; // upper end of the window bitmap / highest received seq_num\n\n  constructor() {\n    this.reset();\n  }\n  /**\n   * Initializes the anti replay window to its default state\n   */\n  public reset(): void {\n    this.window = [];\n    for (let i = 0; i < width / INT_SIZE; i++) {\n      this.window[i] = 0;\n    }\n    this.ceiling = width - 1;\n  }\n\n  /**\n   * Checks if the packet with the given sequence number may be received or has to be discarded\n   * @param seq_num - The sequence number of the packet to be checked\n   */\n  public mayReceive(seq_num: number): boolean {\n    if (seq_num > this.ceiling + width) {\n      // we skipped a lot of packets... I don't think we should accept\n      return false;\n    } else if (seq_num > this.ceiling) {\n      // always accept new packets\n      return true;\n    } else if (seq_num >= this.ceiling - width + 1 && seq_num <= this.ceiling) {\n      // packet falls within the window, check if it was received already.\n      // if so, don't accept\n      return !this.hasReceived(seq_num);\n    } /* seq_num <= this.ceiling - width */ else {\n      // too old, don't accept\n      return false;\n    }\n  }\n\n  /**\n   * Checks if the packet with the given sequence number is marked as received\n   * @param seq_num - The sequence number of the packet to be checked\n   */\n  public hasReceived(seq_num: number): boolean {\n    // check if the packet was received already\n    const lowerBound = this.ceiling - width + 1;\n    // find out where the bit is located\n    const bitIndex = seq_num - lowerBound;\n    const windowIndex = Math.floor(bitIndex / INT_SIZE);\n    const windowBit = bitIndex % INT_SIZE;\n    const flag = 1 << windowBit;\n    // check if it is set;\n    return (this.window[windowIndex] & flag) === flag;\n  }\n\n  /**\n   * Marks the packet with the given sequence number as received\n   * @param seq_num - The sequence number of the packet\n   */\n  public markAsReceived(seq_num: number): void {\n    if (seq_num > this.ceiling) {\n      // shift the window\n      let amount = seq_num - this.ceiling;\n      // first shift whole blocks\n      while (amount > INT_SIZE) {\n        for (let i = 1; i < this.window.length; i++) {\n          this.window[i - 1] = this.window[i];\n        }\n        this.window[this.window.length - 1] = 0;\n        amount -= INT_SIZE;\n      }\n      // now shift bitwise (to the right)\n      let overflow = 0;\n      for (let i = 0; i < this.window.length; i++) {\n        overflow = this.window[i] << (INT_SIZE - amount); // BBBBBBAA => AA000000\n        this.window[i] = this.window[i] >>> amount; // BBBBBBAA ==> 00BBBBBB\n        if (i > 0) this.window[i - 1] |= overflow;\n      }\n      // and remember the new ceiling\n      this.ceiling = seq_num;\n    }\n    const lowerBound = this.ceiling - width + 1;\n\n    // find out where the bit is located\n    const bitIndex = seq_num - lowerBound;\n    const windowIndex = Math.floor(bitIndex / INT_SIZE);\n    const windowBit = bitIndex % INT_SIZE;\n    const flag = 1 << windowBit;\n    // and set it\n    this.window[windowIndex] |= flag;\n  }\n}\n"]}