{"version":3,"file":"lipsync.js","sourceRoot":"","sources":["../../../../src/processor/lipsync.ts"],"names":[],"mappings":"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","sourcesContent":["import { int } from \"../../../common/src\";\nimport { CodecFrame } from \"./depacketizer\";\nimport { AVProcessor } from \"./interface\";\n\nexport type LipsyncInput = {\n  frame?: CodecFrame;\n  eol?: boolean;\n};\n\nexport type LipsyncOutput = {\n  frame?: CodecFrame;\n  eol?: boolean;\n};\n\nexport class LipsyncBase implements AVProcessor<LipsyncInput> {\n  bufferLength: number;\n  /**ms */\n  baseTime?: number;\n  audioBuffer: (LipsyncInput & {\n    elapsed: number;\n    kind: string;\n    [key: string]: any;\n  })[][];\n  videoBuffer: (LipsyncInput & {\n    elapsed: number;\n    kind: string;\n    [key: string]: any;\n  })[][];\n  stopped = false;\n  /**ms */\n  private interval: number;\n  private started = false;\n  /**ms */\n  lastCommited = 0;\n\n  constructor(\n    private audioOutput: (output: LipsyncOutput) => void,\n    private videoOutput: (output: LipsyncOutput) => void,\n    private options: Partial<LipSyncOptions> = {}\n  ) {\n    this.bufferLength = this.options.bufferLength ?? 50;\n    this.audioBuffer = [...new Array(this.bufferLength)].map(() => []);\n    this.videoBuffer = [...new Array(this.bufferLength)].map(() => []);\n    this.interval = this.options.interval ?? 500;\n  }\n\n  private start() {\n    // 2列目にカーソルが移ってから処理を始めることで1列目の処理を完了できる\n    if ([...this.audioBuffer[1], ...this.videoBuffer[1]].length === 0) {\n      return;\n    }\n\n    if (this.started) {\n      return;\n    }\n    this.started = true;\n\n    let index = 0;\n    setInterval(() => {\n      const joined = [\n        ...this.audioBuffer[index],\n        ...this.videoBuffer[index],\n      ].filter((b) => b.elapsed >= this.lastCommited);\n      const sorted = joined.sort((a, b) => a.frame!.time - b.frame!.time);\n      this.audioBuffer[index] = [];\n      this.videoBuffer[index] = [];\n\n      for (const output of sorted) {\n        if (output.kind === \"audio\") {\n          this.audioOutput(output);\n        } else {\n          this.videoOutput(output);\n        }\n        this.lastCommited = output.elapsed;\n      }\n\n      index++;\n      if (index === this.bufferLength) {\n        index = 0;\n      }\n    }, this.interval);\n  }\n\n  processAudioInput = ({ frame, eol }: LipsyncInput) => {\n    if (!frame) {\n      this.stopped = true;\n      this.audioOutput({ eol });\n      return;\n    }\n    if (this.stopped) {\n      return;\n    }\n\n    if (this.baseTime == undefined) {\n      this.baseTime = frame.time;\n    }\n\n    /**ms */\n    const elapsed = frame.time - this.baseTime;\n    if (elapsed < 0 || elapsed < this.lastCommited) {\n      return;\n    }\n    const index = int(elapsed / this.interval) % this.bufferLength;\n    this.audioBuffer[index].push({\n      frame,\n      elapsed,\n      kind: \"audio\",\n      seq: frame.sequence,\n    });\n\n    this.start();\n  };\n\n  processVideoInput = ({ frame, eol }: LipsyncInput) => {\n    if (!frame) {\n      this.stopped = true;\n      this.videoOutput({ eol });\n      return;\n    }\n    if (this.stopped) {\n      return;\n    }\n\n    if (this.baseTime == undefined) {\n      this.baseTime = frame.time;\n    }\n\n    /**ms */\n    const elapsed = frame.time - this.baseTime;\n    if (elapsed < 0 || elapsed < this.lastCommited) {\n      return;\n    }\n    const index = int(elapsed / this.interval) % this.bufferLength;\n    this.videoBuffer[index].push({\n      frame,\n      elapsed,\n      kind: \"video\",\n      seq: frame.sequence,\n    });\n\n    this.start();\n  };\n}\n\nexport interface LipSyncOptions {\n  interval: number;\n  bufferLength: number;\n}\n"]}