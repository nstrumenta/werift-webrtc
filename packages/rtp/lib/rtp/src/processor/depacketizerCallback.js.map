{"version":3,"file":"depacketizerCallback.js","sourceRoot":"","sources":["../../../../src/processor/depacketizerCallback.ts"],"names":[],"mappings":";;;AACA,iDAIwB;AAExB,MAAa,mBAAoB,SAAQ,8BAAe;IAGtD,YACE,KAAa,EACb,UAGI,EAAE;QAEN,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QATxB;;;;;WAAiD;QAYjD;;;;mBAAO,CAAC,EAAuC,EAAE,EAAE;gBACjD,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;gBACb,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAEF;;;;mBAAQ,CAAC,KAAwB,EAAE,EAAE;gBACnC,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;oBAC7C,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;iBACjB;YACH,CAAC;WAAC;IAXF,CAAC;CAYF;AAvBD,kDAuBC","sourcesContent":["import { RtpHeader } from \"..\";\nimport {\n  DepacketizeBase,\n  DepacketizerInput,\n  DepacketizerOutput,\n} from \"./depacketizer\";\n\nexport class DepacketizeCallback extends DepacketizeBase {\n  private cb!: (input: DepacketizerOutput) => void;\n\n  constructor(\n    codec: string,\n    options: {\n      waitForKeyframe?: boolean;\n      isFinalPacketInSequence?: (header: RtpHeader) => boolean;\n    } = {}\n  ) {\n    super(codec, options);\n  }\n\n  pipe = (cb: (input: DepacketizerOutput) => void) => {\n    this.cb = cb;\n    return this;\n  };\n\n  input = (input: DepacketizerInput) => {\n    for (const output of this.processInput(input)) {\n      this.cb(output);\n    }\n  };\n}\n"]}