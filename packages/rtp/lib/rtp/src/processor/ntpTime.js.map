{"version":3,"file":"ntpTime.js","sourceRoot":"","sources":["../../../../src/processor/ntpTime.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\n\nimport {\n  bufferReader,\n  bufferWriter,\n  RtcpPacket,\n  RtcpSrPacket,\n  RtpPacket,\n} from \"..\";\nimport { Max32bit } from \"../processor_old/lipsync\";\nimport { Processor } from \"./interface\";\n\nconst log = debug(\"werift-rtp : packages/rtp/src/processor/ntpTime.ts\");\n\nexport type NtpTimeInput = {\n  rtp?: RtpPacket;\n  eol?: boolean;\n  rtcp?: RtcpPacket;\n};\n\nexport interface NtpTimeOutput {\n  rtp?: RtpPacket;\n  /**ms */\n  time?: number;\n  eol?: boolean;\n}\n\nexport class syncRtpBase implements Processor<NtpTimeInput, NtpTimeOutput> {\n  ntpTimestamp?: bigint;\n  rtpTimestamp?: number;\n\n  buffer: RtpPacket[] = [];\n\n  constructor(public clockRate: number) {}\n\n  processInput({ rtcp, rtp, eol }: NtpTimeInput): NtpTimeOutput[] {\n    if (eol) {\n      return [{ eol: true }];\n    }\n\n    if (rtcp && rtcp instanceof RtcpSrPacket && !this.ntpTimestamp) {\n      const { ntpTimestamp, rtpTimestamp } = rtcp.senderInfo;\n      this.ntpTimestamp = ntpTimestamp;\n      this.rtpTimestamp = rtpTimestamp;\n    }\n\n    if (rtp) {\n      this.buffer.push(rtp);\n\n      const res: NtpTimeOutput[] = [];\n\n      this.buffer = this.buffer\n        .map((rtp) => {\n          const ntp = this.calcNtp(rtp.header.timestamp);\n          if (ntp) {\n            res.push({ rtp, time: ntp * 1000 });\n            return undefined;\n          }\n          return rtp;\n        })\n        .filter((r): r is NonNullable<typeof r> => r != undefined);\n      return res;\n    }\n\n    return [];\n  }\n\n  /**sec */\n  private calcNtp(rtpTimestamp: number) {\n    if (this.rtpTimestamp == undefined || this.ntpTimestamp == undefined) {\n      return;\n    }\n\n    // base rtpTimestamp is rollover\n    if (rtpTimestamp - this.rtpTimestamp > Max32bit - this.clockRate * 60) {\n      this.rtpTimestamp += Max32bit;\n      log(\"base rtpTimestamp is rollover\");\n    }\n\n    // target rtpTimestamp is rollover\n    else if (\n      rtpTimestamp + (Max32bit - this.clockRate * 60) - this.rtpTimestamp <\n      0\n    ) {\n      rtpTimestamp += Max32bit;\n      log(\"target rtpTimestamp is rollover\");\n    }\n\n    const elapsed = (rtpTimestamp - this.rtpTimestamp) / this.clockRate;\n\n    const ntp = ntpTime2Time(this.ntpTimestamp) + elapsed;\n\n    return ntp;\n  }\n}\n\nexport const ntpTime2Time = (ntp: bigint) => {\n  const [ntpSec, ntpMsec] = bufferReader(bufferWriter([8], [ntp]), [4, 4]);\n\n  return Number(`${ntpSec}.${ntpMsec}`);\n};\n"]}