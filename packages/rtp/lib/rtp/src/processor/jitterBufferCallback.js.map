{"version":3,"file":"jitterBufferCallback.js","sourceRoot":"","sources":["../../../../src/processor/jitterBufferCallback.ts"],"names":[],"mappings":";;;AAAA,iDAKwB;AAExB,MAAa,oBAAqB,SAAQ,+BAAgB;IAExD,YACS,SAAiB,EACxB,UAAwC,EAAE;QAE1C,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;;;;;mBAHnB;;QAFT;;;;;WAAiD;QAQjD;;;;mBAAO,CAAC,EAAuC,EAAE,EAAE;gBACjD,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;gBACb,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAEF;;;;mBAAQ,CAAC,KAAwB,EAAE,EAAE;gBACnC,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;oBAC7C,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;iBACjB;YACH,CAAC;WAAC;IAXF,CAAC;CAYF;AAnBD,oDAmBC","sourcesContent":["import {\n  JitterBufferBase,\n  JitterBufferInput,\n  JitterBufferOptions,\n  JitterBufferOutput,\n} from \"./jitterBuffer\";\n\nexport class JitterBufferCallback extends JitterBufferBase {\n  private cb!: (input: JitterBufferOutput) => void;\n  constructor(\n    public clockRate: number,\n    options: Partial<JitterBufferOptions> = {}\n  ) {\n    super(clockRate, options);\n  }\n\n  pipe = (cb: (input: JitterBufferOutput) => void) => {\n    this.cb = cb;\n    return this;\n  };\n\n  input = (input: JitterBufferInput) => {\n    for (const output of this.processInput(input)) {\n      this.cb(output);\n    }\n  };\n}\n"]}