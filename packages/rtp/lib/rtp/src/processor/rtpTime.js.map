{"version":3,"file":"rtpTime.js","sourceRoot":"","sources":["../../../../src/processor/rtpTime.ts"],"names":[],"mappings":";;;AAAA,0BAA+C;AAe/C,MAAa,WAAW;IAKtB,YAAmB,SAAiB;;;;;mBAAjB;;QAJnB;;;;;WAAuB;QACvB,QAAQ;QACR;;;;mBAAU,CAAC;WAAC;IAE2B,CAAC;IAExC,YAAY,CAAC,EAAE,GAAG,EAAE,GAAG,EAAgB;QACrC,IAAI,GAAG,EAAE;YACP,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;SACxB;QAED,IAAI,GAAG,EAAE;YACP,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAClD,OAAO,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;SACjC;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;IAEO,MAAM,CAAC,SAAiB;QAC9B,IAAI,IAAI,CAAC,aAAa,IAAI,SAAS,EAAE;YACnC,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;SAChC;QACD,MAAM,MAAM,GACV,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,aAAS,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QAEjE,MAAM,OAAO,GAAG,MAAM;YACpB,CAAC,CAAC,SAAS,GAAG,aAAS,GAAG,IAAI,CAAC,aAAa;YAC5C,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC;QAEnC,IAAI,CAAC,OAAO,GAAG,IAAA,OAAG,EAAC,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,CAAC;QACtD,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;CACF;AAlCD,kCAkCC","sourcesContent":["import { int, Max32Uint, RtpPacket } from \"..\";\nimport { Processor } from \"./interface\";\n\nexport type RtpTimeInput = {\n  rtp?: RtpPacket;\n  eol?: boolean;\n};\n\nexport interface RtpTimeOutput {\n  rtp?: RtpPacket;\n  /**ms */\n  time?: number;\n  eol?: boolean;\n}\n\nexport class RtpTimeBase implements Processor<RtpTimeInput, RtpTimeOutput> {\n  baseTimestamp?: number;\n  /**ms */\n  elapsed = 0;\n\n  constructor(public clockRate: number) {}\n\n  processInput({ rtp, eol }: RtpTimeInput): RtpTimeOutput[] {\n    if (eol) {\n      return [{ eol: true }];\n    }\n\n    if (rtp) {\n      const elapsed = this.update(rtp.header.timestamp);\n      return [{ rtp, time: elapsed }];\n    }\n\n    return [];\n  }\n\n  private update(timestamp: number) {\n    if (this.baseTimestamp == undefined) {\n      this.baseTimestamp = timestamp;\n    }\n    const rotate =\n      Math.abs(timestamp - this.baseTimestamp) > (Max32Uint / 4) * 3;\n\n    const elapsed = rotate\n      ? timestamp + Max32Uint - this.baseTimestamp\n      : timestamp - this.baseTimestamp;\n\n    this.elapsed = int((elapsed / this.clockRate) * 1000);\n    return this.elapsed;\n  }\n}\n"]}