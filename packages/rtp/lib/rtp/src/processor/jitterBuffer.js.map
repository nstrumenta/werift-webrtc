{"version":3,"file":"jitterBuffer.js","sourceRoot":"","sources":["../../../../src/processor/jitterBuffer.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\n\nimport {\n  RequireAtLeastOne,\n  RtpPacket,\n  uint16Add,\n  uint16Gte,\n  uint32Add,\n  uint32Gt,\n} from \"..\";\nimport { Processor } from \"./interface\";\nimport { RtpOutput } from \"./source\";\n\nconst srcPath = `werift-rtp : packages/rtp/src/processor/jitterBuffer.ts`;\nconst log = debug(srcPath);\n\nexport type JitterBufferInput = RtpOutput;\n\nexport interface JitterBufferOutput extends RtpOutput {\n  isPacketLost?: { from: number; to: number };\n}\n\nexport class JitterBufferBase\n  implements Processor<JitterBufferInput, JitterBufferOutput>\n{\n  private options: JitterBufferOptions;\n  /**uint16 */\n  private presentSeqNum?: number;\n  private rtpBuffer: { [sequenceNumber: number]: RtpPacket } = {};\n  private get expectNextSeqNum() {\n    return uint16Add(this.presentSeqNum!, 1);\n  }\n\n  constructor(\n    public clockRate: number,\n    options: Partial<JitterBufferOptions> = {}\n  ) {\n    this.options = {\n      latency: options.latency ?? 200,\n      bufferSize: options.bufferSize ?? 10000,\n    };\n  }\n\n  processInput(input: JitterBufferInput): JitterBufferOutput[] {\n    const output: JitterBufferOutput[] = [];\n\n    if (!input.rtp) {\n      if (input.eol) {\n        const packets = this.sortAndClearBuffer(this.rtpBuffer);\n        for (const rtp of packets) {\n          output.push({ rtp });\n        }\n        output.push({ eol: true });\n      }\n      return output;\n    }\n\n    const { packets, timeoutSeqNum } = this.processRtp(input.rtp);\n\n    if (timeoutSeqNum != undefined) {\n      const isPacketLost = {\n        from: this.expectNextSeqNum,\n        to: timeoutSeqNum,\n      };\n      this.presentSeqNum = input.rtp.header.sequenceNumber;\n      output.push({ isPacketLost });\n      if (packets) {\n        for (const rtp of [...packets, input.rtp]) {\n          output.push({ rtp });\n        }\n      }\n      return output;\n    } else {\n      if (packets) {\n        for (const rtp of packets) {\n          output.push({ rtp });\n        }\n        return output;\n      }\n      return [];\n    }\n  }\n\n  private processRtp(rtp: RtpPacket): RequireAtLeastOne<{\n    packets: RtpPacket[];\n    timeoutSeqNum: number;\n    nothing: undefined;\n  }> {\n    const { sequenceNumber, timestamp } = rtp.header;\n\n    // init\n    if (this.presentSeqNum == undefined) {\n      this.presentSeqNum = sequenceNumber;\n      return { packets: [rtp] };\n    }\n\n    // duplicate\n    if (uint16Gte(this.presentSeqNum, sequenceNumber)) {\n      log(\"duplicate\", { sequenceNumber });\n      return { nothing: undefined };\n    }\n\n    // expect\n    if (sequenceNumber === this.expectNextSeqNum) {\n      this.presentSeqNum = sequenceNumber;\n\n      const rtpBuffer = this.resolveBuffer(uint16Add(sequenceNumber, 1));\n      this.presentSeqNum =\n        rtpBuffer.at(-1)?.header.sequenceNumber ?? this.presentSeqNum;\n\n      this.disposeTimeoutPackets(timestamp);\n\n      return { packets: [rtp, ...rtpBuffer] };\n    }\n\n    this.pushRtpBuffer(rtp);\n\n    const { latestTimeoutSeqNum, sorted } =\n      this.disposeTimeoutPackets(timestamp);\n\n    if (latestTimeoutSeqNum) {\n      return { timeoutSeqNum: latestTimeoutSeqNum, packets: sorted };\n    } else {\n      return { nothing: undefined };\n    }\n  }\n\n  private pushRtpBuffer(rtp: RtpPacket) {\n    if (Object.values(this.rtpBuffer).length > this.options.bufferSize) {\n      log(\"buffer over flow\");\n      return;\n    }\n    // log(\"pushRtpBuffer\", { seq: rtp.header.sequenceNumber });\n    this.rtpBuffer[rtp.header.sequenceNumber] = rtp;\n  }\n\n  private resolveBuffer(seqNumFrom: number) {\n    const resolve: RtpPacket[] = [];\n\n    for (let index = seqNumFrom; ; index = uint16Add(index, 1)) {\n      const rtp = this.rtpBuffer[index];\n      if (rtp) {\n        resolve.push(rtp);\n        delete this.rtpBuffer[index];\n      } else {\n        break;\n      }\n    }\n    // if (resolve.length > 0) {\n    //   log(\n    //     \"resolveBuffer\",\n    //     resolve.map((r) => r.header.sequenceNumber)\n    //   );\n    // }\n    return resolve;\n  }\n\n  private sortAndClearBuffer(rtpBuffer: {\n    [sequenceNumber: number]: RtpPacket;\n  }) {\n    const buffer: RtpPacket[] = [];\n    for (let index = this.presentSeqNum ?? 0; ; index = uint16Add(index, 1)) {\n      const rtp = rtpBuffer[index];\n      if (rtp) {\n        buffer.push(rtp);\n        delete rtpBuffer[index];\n      }\n      if (Object.values(rtpBuffer).length === 0) {\n        break;\n      }\n    }\n    return buffer;\n  }\n\n  private disposeTimeoutPackets(baseTimestamp: number) {\n    let latestTimeoutSeqNum: number | undefined;\n\n    const packets = Object.values(this.rtpBuffer)\n      .map((rtp) => {\n        const { timestamp, sequenceNumber } = rtp.header;\n\n        if (uint32Gt(timestamp, baseTimestamp)) {\n          return;\n        }\n\n        const elapsedSec =\n          uint32Add(baseTimestamp, -timestamp) / this.clockRate;\n\n        if (elapsedSec * 1000 > this.options.latency) {\n          log(\"timeout packet\", {\n            sequenceNumber,\n            elapsedSec,\n            baseTimestamp,\n            timestamp,\n          });\n\n          if (latestTimeoutSeqNum == undefined) {\n            latestTimeoutSeqNum = sequenceNumber;\n          }\n          // 現在のSeqNumとの差が最も大きいSeqNumを探す\n          if (\n            uint16Add(sequenceNumber, -this.presentSeqNum!) >\n            uint16Add(latestTimeoutSeqNum, -this.presentSeqNum!)\n          ) {\n            latestTimeoutSeqNum = sequenceNumber;\n          }\n\n          const packet = this.rtpBuffer[sequenceNumber];\n          delete this.rtpBuffer[sequenceNumber];\n          return packet;\n        }\n      })\n      .flatMap((p): RtpPacket => p as RtpPacket)\n      .filter((p) => p);\n\n    const sorted = this.sortAndClearBuffer(\n      packets.reduce((acc, cur) => {\n        acc[cur.header.sequenceNumber] = cur;\n        return acc;\n      }, {})\n    );\n\n    return { latestTimeoutSeqNum, sorted };\n  }\n}\n\nexport interface JitterBufferOptions {\n  /**milliseconds */\n  latency: number;\n  bufferSize: number;\n}\n"]}