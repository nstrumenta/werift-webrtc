{"version":3,"file":"ntpTimeCallback.js","sourceRoot":"","sources":["../../../../src/processor/ntpTimeCallback.ts"],"names":[],"mappings":";;;AAAA,uCAImB;AAEnB,MAAa,eAAgB,SAAQ,qBAAW;IAG9C,YAAY,SAAiB;QAC3B,KAAK,CAAC,SAAS,CAAC,CAAC;QAHnB;;;;;WAA4C;QAM5C;;;;mBAAO,CAAC,EAAkC,EAAE,EAAE;gBAC5C,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;gBACb,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAEF;;;;mBAAQ,CAAC,KAAmB,EAAE,EAAE;gBAC9B,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;oBAC7C,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;iBACjB;YACH,CAAC;WAAC;IAXF,CAAC;CAYF;AAjBD,0CAiBC","sourcesContent":["import {\n  NtpTimeInput,\n  NtpTimeOutput,\n  syncRtpBase as NtpTimeBase,\n} from \"./ntpTime\";\n\nexport class NtpTimeCallback extends NtpTimeBase {\n  private cb!: (input: NtpTimeOutput) => void;\n\n  constructor(clockRate: number) {\n    super(clockRate);\n  }\n\n  pipe = (cb: (input: NtpTimeOutput) => void) => {\n    this.cb = cb;\n    return this;\n  };\n\n  input = (input: NtpTimeInput) => {\n    for (const output of this.processInput(input)) {\n      this.cb(output);\n    }\n  };\n}\n"]}