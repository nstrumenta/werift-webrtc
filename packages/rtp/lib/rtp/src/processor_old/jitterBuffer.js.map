{"version":3,"file":"jitterBuffer.js","sourceRoot":"","sources":["../../../../src/processor_old/jitterBuffer.ts"],"names":[],"mappings":";;;AAAA,iCAA8B;AAE9B,6CAAgD;AAGhD,iCAAkC;AAElC,MAAM,GAAG,GAAG,IAAA,aAAK,EAAC,qDAAqD,CAAC,CAAC;AAEzE,MAAa,YAAa,SAAQ,eAAQ;IAA1C;;QACE;;;;mBAAgB,CAAC;WAAC;QAClB;;;;;WAAsB;QACtB;;;;mBAA0D,EAAE;WAAC;QAE7D;;;;mBAAW,GAAG;WAAC;QAUf;;;;mBAAgB,CAAC,CAAY,EAAE,EAAE;gBAC/B,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;gBAEzC,IAAI,IAAI,CAAC,IAAI,IAAI,SAAS,EAAE;oBAC1B,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC;iBACrC;qBAAM,IAAI,CAAC,CAAC,MAAM,CAAC,cAAc,IAAI,IAAA,eAAS,EAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE;oBAC7D,IAAI,IAAI,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,QAAQ,EAAE;wBACjC,IAAI,CAAC,IAAI,GAAG,IAAA,eAAS,EAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;qBACrC;yBAAM;wBACL,OAAO;qBACR;iBACF;qBAAM;oBACL,IAAI,CAAC,IAAI,GAAG,IAAA,eAAS,EAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;iBACrC;gBAED,MAAM,OAAO,GAAgB,EAAE,CAAC;gBAChC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACrB,QAAS,IAAI,GAAG,IAAA,eAAS,EAAC,IAAI,EAAE,CAAC,CAAC,EAAE;oBAClC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBAC5B,IAAI,CAAC,EAAE;wBACL,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBAChB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;qBAC1B;yBAAM;wBACL,MAAM;qBACP;iBACF;gBACD,IAAI,CAAC,IAAI,GAAG,IAAA,eAAS,EAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;gBAEhC,IAAI,CAAC,QAAQ,EAAE,cAAc,EAAE,CAAC,OAAO,CAAC,CAAC;YAC3C,CAAC;WAAC;IACJ,CAAC;IAtCC,cAAc,CAAC,OAAoB;QACjC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAED,eAAe,CAAC,OAAqB;QACnC,IAAI,CAAC,QAAQ,EAAE,eAAe,EAAE,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;CAgCF;AA7CD,oCA6CC","sourcesContent":["import { debug } from \"debug\";\n\nimport { uint16Add } from \"../../../common/src\";\nimport { RtpPacket } from \"..\";\nimport { RtcpPacket } from \"../rtcp/rtcp\";\nimport { Pipeline } from \"./base\";\n\nconst log = debug(\"werift : packages/rtp/src/processor/jitterBuffer.ts\");\n\nexport class JitterBuffer extends Pipeline {\n  private retry = 0;\n  private head?: number;\n  private buffer: { [sequenceNumber: number]: RtpPacket } = {};\n\n  maxRetry = 100;\n\n  pushRtpPackets(packets: RtpPacket[]) {\n    packets.forEach(this.onRtp);\n  }\n\n  pushRtcpPackets(packets: RtcpPacket[]) {\n    this.children?.pushRtcpPackets?.(packets);\n  }\n\n  private onRtp = (p: RtpPacket) => {\n    this.buffer[p.header.sequenceNumber] = p;\n\n    if (this.head == undefined) {\n      this.head = p.header.sequenceNumber;\n    } else if (p.header.sequenceNumber != uint16Add(this.head, 1)) {\n      if (this.retry++ >= this.maxRetry) {\n        this.head = uint16Add(this.head, 2);\n      } else {\n        return;\n      }\n    } else {\n      this.head = uint16Add(this.head, 1);\n    }\n\n    const packets: RtpPacket[] = [];\n    let tail = this.head;\n    for (; ; tail = uint16Add(tail, 1)) {\n      const p = this.buffer[tail];\n      if (p) {\n        packets.push(p);\n        delete this.buffer[tail];\n      } else {\n        break;\n      }\n    }\n    this.head = uint16Add(tail, -1);\n\n    this.children?.pushRtpPackets?.(packets);\n  };\n}\n"]}