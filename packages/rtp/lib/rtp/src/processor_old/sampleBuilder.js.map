{"version":3,"file":"sampleBuilder.js","sourceRoot":"","sources":["../../../../src/processor_old/sampleBuilder.ts"],"names":[],"mappings":";;;AAGA,sCAAsC;AACtC,iCAAkC;AAElC,MAAa,aAAc,SAAQ,eAAQ;IAGzC,YACU,uBAAuD,EAC/D,OAGC;QAED,KAAK,CAAC,OAAO,CAAC,CAAC;;;;;mBANP;;QAHV;;;;mBAAiC,EAAE;WAAC;IAUpC,CAAC;IAED,cAAc,CAAC,QAAqB;QAClC,IAAI,CAAC,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,GAAG,QAAQ,CAAC,CAAC;QAElD,IAAI,IAAwB,CAAC;QAC7B,KAAK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,IAAA,kBAAS,EAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YAC9C,IAAI,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE;gBAC1C,IAAI,GAAG,CAAC,CAAC;gBACT,MAAM;aACP;SACF;QACD,IAAI,IAAI,IAAI,SAAS,EAAE;YACrB,OAAO;SACR;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;QAClD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;QAEhD,IAAI,CAAC,QAAQ,EAAE,cAAc,EAAE,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,eAAe,CAAC,OAAqB;QACnC,IAAI,CAAC,QAAQ,EAAE,eAAe,EAAE,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;CACF;AApCD,sCAoCC","sourcesContent":["import Event from \"rx.mini\";\n\nimport { RtcpPacket, RtpHeader, RtpPacket } from \"..\";\nimport { enumerate } from \"../helper\";\nimport { Pipeline } from \"./base\";\n\nexport class SampleBuilder extends Pipeline {\n  private buffering: RtpPacket[] = [];\n\n  constructor(\n    private isFinalPacketInSequence: (header: RtpHeader) => boolean,\n    streams?: {\n      rtpStream?: Event<[RtpPacket]>;\n      rtcpStream?: Event<[RtcpPacket]>;\n    }\n  ) {\n    super(streams);\n  }\n\n  pushRtpPackets(incoming: RtpPacket[]) {\n    this.buffering = [...this.buffering, ...incoming];\n\n    let tail: number | undefined;\n    for (const [i, p] of enumerate(this.buffering)) {\n      if (this.isFinalPacketInSequence(p.header)) {\n        tail = i;\n        break;\n      }\n    }\n    if (tail == undefined) {\n      return;\n    }\n\n    const packets = this.buffering.slice(0, tail + 1);\n    this.buffering = this.buffering.slice(tail + 1);\n\n    this.children?.pushRtpPackets?.(packets);\n  }\n\n  pushRtcpPackets(packets: RtcpPacket[]) {\n    this.children?.pushRtcpPackets?.(packets);\n  }\n}\n"]}