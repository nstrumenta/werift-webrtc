{"version":3,"file":"webm.js","sourceRoot":"","sources":["../../../../../../src/nonstandard/recorder/writer/webm.ts"],"names":[],"mappings":"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","sourcesContent":["import { appendFile, open, unlink } from \"fs/promises\";\nimport { EventDisposer } from \"rx.mini\";\nimport { ReadableStreamDefaultReadResult } from \"stream/web\";\n\nimport { SupportedCodec } from \"../../../../../rtp/src/container/webm\";\nimport {\n  depacketizeTransformer,\n  jitterBufferTransformer,\n  MediaStreamTrack,\n  RtpSourceStream,\n  WebmStream,\n  WebmStreamOutput,\n  WeriftError,\n} from \"../../..\";\nimport { MediaWriter } from \".\";\n\nconst sourcePath = \"packages/webrtc/src/nonstandard/recorder/writer/webm.ts\";\n\nexport class WebmFactory extends MediaWriter {\n  rtpSources: RtpSourceStream[] = [];\n\n  unSubscribers = new EventDisposer();\n\n  async start(tracks: MediaStreamTrack[]) {\n    await unlink(this.path).catch((e) => e);\n\n    const inputTracks = tracks.map((track, i) => {\n      const trackNumber = i + 1;\n      const payloadType = track.codec!.payloadType;\n\n      if (track.kind === \"video\") {\n        const codec = ((): SupportedCodec => {\n          switch (track.codec?.name.toLowerCase() as SupportedVideoCodec) {\n            case \"vp8\":\n              return \"VP8\";\n            case \"vp9\":\n              return \"VP9\";\n            case \"h264\":\n              return \"MPEG4/ISO/AVC\";\n            case \"av1x\":\n              return \"AV1\";\n            default:\n              throw new WeriftError({\n                message: \"unsupported codec\",\n                payload: { track, path: sourcePath },\n              });\n          }\n        })();\n        return {\n          kind: \"video\" as const,\n          codec,\n          clockRate: 90000,\n          trackNumber,\n          width: this.options.width,\n          height: this.options.height,\n          payloadType,\n          track,\n        };\n      } else {\n        return {\n          kind: \"audio\" as const,\n          codec: \"OPUS\" as const,\n          clockRate: 48000,\n          trackNumber,\n          payloadType,\n          track,\n        };\n      }\n    });\n\n    const webm = new WebmStream(inputTracks, {\n      duration: this.options.defaultDuration ?? 1000 * 60 * 60 * 24,\n    });\n\n    this.rtpSources = inputTracks.map(({ track, clockRate, codec }) => {\n      const rtpSource = new RtpSourceStream();\n\n      track.onReceiveRtp\n        .subscribe((rtp) => {\n          rtpSource.push(rtp.clone());\n        })\n        .disposer(this.unSubscribers);\n\n      // const jitterBuffer = jitterBufferTransformer(clockRate, {\n      //   latency: this.options.jitterBufferLatency,\n      //   bufferSize: this.options.jitterBufferSize,\n      // });\n\n      if (track.kind === \"video\") {\n        rtpSource.readable\n          // .pipeThrough(jitterBuffer)\n          .pipeThrough(\n            depacketizeTransformer(codec, {\n              waitForKeyframe: this.options.waitForKeyframe,\n              isFinalPacketInSequence: (h) => h.marker,\n            })\n          )\n          .pipeTo(webm.videoStream);\n      } else {\n        rtpSource.readable\n          // .pipeThrough(jitterBuffer)\n          .pipeThrough(depacketizeTransformer(codec))\n          .pipeTo(webm.audioStream);\n      }\n\n      return rtpSource;\n    });\n\n    const reader = webm.webmStream.getReader();\n    const readChunk = async ({\n      value,\n      done,\n    }: ReadableStreamDefaultReadResult<WebmStreamOutput>) => {\n      if (done) return;\n\n      if (value.saveToFile) {\n        await appendFile(this.path, value.saveToFile);\n      } else if (value.eol) {\n        const { durationElement } = value.eol;\n        const handler = await open(this.path, \"r+\");\n        await handler.write(durationElement, 0, durationElement.length, 83);\n        await handler.close();\n      }\n      reader.read().then(readChunk);\n    };\n    reader.read().then(readChunk);\n  }\n\n  async stop() {\n    await Promise.all(this.rtpSources.map((r) => r.stop()));\n\n    this.unSubscribers.dispose();\n  }\n}\n\nconst supportedVideoCodecs = [\"h264\", \"vp8\", \"vp9\", \"av1x\"] as const;\ntype SupportedVideoCodec = (typeof supportedVideoCodecs)[number];\n"]}