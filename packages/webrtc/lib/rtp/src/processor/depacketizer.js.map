{"version":3,"file":"depacketizer.js","sourceRoot":"","sources":["../../../../../rtp/src/processor/depacketizer.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\n\nimport { RtpHeader, RtpPacket, uint16Add, uint16Gt } from \"..\";\nimport { dePacketizeRtpPackets } from \"../codec\";\nimport { enumerate } from \"../helper\";\nimport { Processor } from \"./interface\";\n\nconst path = `werift-rtp : packages/rtp/src/processor/depacketizer.ts`;\nconst log = debug(path);\n\nexport type DepacketizerInput = {\n  rtp?: RtpPacket;\n  /**ms */\n  time?: number;\n  eol?: boolean;\n};\n\nexport interface DepacketizerOutput {\n  frame?: CodecFrame;\n  eol?: boolean;\n}\n\nexport interface CodecFrame {\n  data: Buffer;\n  isKeyframe: boolean;\n  /**ms */\n  time: number;\n  [key: string]: any;\n}\n\nexport class DepacketizeBase\n  implements Processor<DepacketizerInput, DepacketizerOutput>\n{\n  private buffering: DepacketizerInput[] = [];\n  private lastSeqNum?: number;\n  private frameBroken = false;\n  sequence = 0;\n\n  constructor(\n    private codec: string,\n    private options: {\n      isFinalPacketInSequence?: (header: RtpHeader) => boolean;\n    } = {}\n  ) {}\n\n  processInput(input: DepacketizerInput): DepacketizerOutput[] {\n    const output: DepacketizerOutput[] = [];\n    if (!input.rtp) {\n      if (input.eol) {\n        output.push({ eol: true });\n      }\n      return output;\n    }\n\n    if (this.options.isFinalPacketInSequence) {\n      const isFinal = this.checkFinalPacket(input);\n      if (isFinal) {\n        try {\n          const { data, isKeyframe, sequence, timestamp } =\n            dePacketizeRtpPackets(\n              this.codec,\n              this.buffering.map((b) => b.rtp!)\n            );\n\n          if (isKeyframe) {\n            log(\"isKeyframe\", this.codec);\n          }\n\n          if (!this.frameBroken) {\n            const time = this.buffering.at(-1)?.time ?? 0;\n            output.push({\n              frame: {\n                data,\n                isKeyframe,\n                time,\n                sequence: this.sequence++,\n                rtpSeq: sequence,\n                timestamp,\n              },\n            });\n          }\n\n          if (this.frameBroken) {\n            this.frameBroken = false;\n          }\n\n          this.clearBuffer();\n\n          return output;\n        } catch (error) {\n          log(\"error\", error, input);\n          this.clearBuffer();\n        }\n      }\n    } else {\n      try {\n        const { data, isKeyframe, sequence, timestamp } = dePacketizeRtpPackets(\n          this.codec,\n          [input.rtp]\n        );\n        output.push({\n          frame: {\n            data,\n            isKeyframe,\n            time: input.time!,\n            sequence: this.sequence++,\n            rtpSeq: sequence,\n            timestamp,\n          },\n        });\n        return output;\n      } catch (error) {\n        log(\"error\", error, input);\n      }\n    }\n    return [];\n  }\n\n  private clearBuffer() {\n    this.buffering.forEach((b) => b.rtp!.clear());\n    this.buffering = [];\n  }\n\n  private checkFinalPacket({ rtp, time }: DepacketizerInput): boolean {\n    if (!this.options.isFinalPacketInSequence) {\n      throw new Error(\"isFinalPacketInSequence not exist\");\n    }\n\n    const { sequenceNumber } = rtp!.header;\n    if (this.lastSeqNum != undefined) {\n      const expect = uint16Add(this.lastSeqNum, 1);\n      if (uint16Gt(expect, sequenceNumber)) {\n        log(\"unexpect\", { expect, sequenceNumber });\n        return false;\n      }\n      if (uint16Gt(sequenceNumber, expect)) {\n        log(\"packet lost happened\", { expect, sequenceNumber });\n        this.frameBroken = true;\n        this.clearBuffer();\n      }\n    }\n\n    this.buffering.push({ rtp, time });\n    this.lastSeqNum = sequenceNumber;\n\n    let finalPacket: number | undefined;\n    for (const [i, { rtp }] of enumerate(this.buffering)) {\n      if (this.options.isFinalPacketInSequence(rtp!.header)) {\n        finalPacket = i;\n        break;\n      }\n    }\n    if (finalPacket == undefined) {\n      return false;\n    }\n\n    return true;\n  }\n}\n"]}