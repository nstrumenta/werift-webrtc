{"version":3,"file":"depacketizerTransformer.js","sourceRoot":"","sources":["../../../../../rtp/src/processor/depacketizerTransformer.ts"],"names":[],"mappings":";;;AAAA,oCAA6C;AAG7C,iDAIwB;AAEjB,MAAM,sBAAsB,GAAG,CACpC,GAAG,IAA0D,EAC7D,EAAE,CAAC,IAAI,sBAAsB,CAAC,GAAG,IAAI,CAAC,CAAC,SAAS,CAAC;AAFtC,QAAA,sBAAsB,0BAEgB;AAEnD,MAAM,sBAAuB,SAAQ,8BAAe;IAGlD,YACE,KAAa,EACb,UAGI,EAAE;QAEN,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QATxB;;;;;WAAkE;QAWhE,IAAI,CAAC,SAAS,GAAG,IAAI,qBAAe,CAAC;YACnC,SAAS,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;gBAC3B,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE;oBAC1C,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;iBACrB;YACH,CAAC;SACF,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { TransformStream } from \"stream/web\";\n\nimport { RtpHeader } from \"..\";\nimport {\n  DepacketizeBase,\n  DepacketizerInput,\n  DepacketizerOutput,\n} from \"./depacketizer\";\n\nexport const depacketizeTransformer = (\n  ...args: ConstructorParameters<typeof DepacketizeTransformer>\n) => new DepacketizeTransformer(...args).transform;\n\nclass DepacketizeTransformer extends DepacketizeBase {\n  transform: TransformStream<DepacketizerInput, DepacketizerOutput>;\n\n  constructor(\n    codec: string,\n    options: {\n      waitForKeyframe?: boolean;\n      isFinalPacketInSequence?: (header: RtpHeader) => boolean;\n    } = {}\n  ) {\n    super(codec, options);\n\n    this.transform = new TransformStream({\n      transform: (input, output) => {\n        for (const res of this.processInput(input)) {\n          output.enqueue(res);\n        }\n      },\n    });\n  }\n}\n"]}