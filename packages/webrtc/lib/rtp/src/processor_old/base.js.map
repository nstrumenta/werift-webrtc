{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../../rtp/src/processor_old/base.ts"],"names":[],"mappings":";;;AAIA,MAAsB,QAAQ;IAI5B,YAAY,OAGX;QAND;;;;;WAAuC;QACvC;;;;;WAA8B;QAM5B,MAAM,SAAS,GAAiC,EAAE,CAAC;QACnD;YACE,MAAM,EAAE,WAAW,EAAE,GACnB,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE;gBACzC,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YAChC,CAAC,CAAC,IAAI,EAAE,CAAC;YACX,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC7B;QACD;YACE,MAAM,EAAE,WAAW,EAAE,GACnB,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE;gBAC1C,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACjC,CAAC,CAAC,IAAI,EAAE,CAAC;YACX,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC7B;QACD,IAAI,CAAC,QAAQ,GAAG,GAAG,EAAE;YACnB,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAClC,CAAC,CAAC;IACJ,CAAC;IACD,IAAI,CAAC,QAA2B;QAC9B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,cAAc,CAAC,OAAoB,IAAG,CAAC;IACvC,eAAe,CAAC,OAAqB,IAAG,CAAC;IACzC,IAAI;QACF,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;IACpB,CAAC;CACF;AApCD,4BAoCC;AAED,MAAsB,MAAM;IAC1B,cAAc,CAAE,OAAoB,IAAG,CAAC;IACxC,eAAe,CAAE,OAAqB,IAAG,CAAC;CAC3C;AAHD,wBAGC","sourcesContent":["import Event from \"rx.mini\";\n\nimport { RtcpPacket, RtpPacket } from \"..\";\n\nexport abstract class Pipeline {\n  protected children?: Pipeline | Output;\n  private disposer?: () => void;\n\n  constructor(streams?: {\n    rtpStream?: Event<[RtpPacket]>;\n    rtcpStream?: Event<[RtcpPacket]>;\n  }) {\n    const disposers: ((() => void) | undefined)[] = [];\n    {\n      const { unSubscribe } =\n        streams?.rtpStream?.subscribe?.((packet) => {\n          this.pushRtpPackets([packet]);\n        }) ?? {};\n      disposers.push(unSubscribe);\n    }\n    {\n      const { unSubscribe } =\n        streams?.rtcpStream?.subscribe?.((packet) => {\n          this.pushRtcpPackets([packet]);\n        }) ?? {};\n      disposers.push(unSubscribe);\n    }\n    this.disposer = () => {\n      disposers.forEach((d) => d?.());\n    };\n  }\n  pipe(children: Pipeline | Output): Pipeline | Output {\n    this.children = children;\n    return this;\n  }\n  pushRtpPackets(packets: RtpPacket[]) {}\n  pushRtcpPackets(packets: RtcpPacket[]) {}\n  stop() {\n    this.disposer?.();\n  }\n}\n\nexport abstract class Output {\n  pushRtpPackets?(packets: RtpPacket[]) {}\n  pushRtcpPackets?(packets: RtcpPacket[]) {}\n}\n"]}